{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/actions/index.js","webpack://TDLib/./src/actions/Action.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/./src/boot.js","webpack://TDLib/./src/actions/Idle.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-objects/index.js","webpack://TDLib/./src/sprites/world-objects/index.js","webpack://TDLib/./src/utils/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_Sprite2","_interopRequireDefault","_behaviours","_components","Character","room","x","y","texture","layer","_ref","_this","_classCallCheck","this","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","concat","Array","slice","arguments","default","INTERACTIVE","alphaTolerance","actions","ActionComponent","facing","_get","Actions","Action","require","Idle","invoker","actor","config","length","undefined","constructor","target","_queue","isPaused","isArray","forEach","action","push","abort","start","finish","shift","remove","pause","resume","update","BaseAction","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","_createClass","Components","Component","gameObject","Rooms","Room","Sprite","hasBody","observeText","INERT","DEFAULT_OBSERVE_TEXT","examineOrInteractText","DEFAULT_EXAMINE_OR_INTERACT_TEXT","blockExamineText","noLightObserveText","DEFAULT_NO_LIGHT_OBSERVE_TEXT","noLightExamineOrInteractText","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","minLightLevelToObserve","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","Math","floor","random","type","add","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","console","warn","Phaser","Physics","Arcade","log","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","global","TDLib","boot","Sprites","Utils","g","Function","eval","e","_Action2","addActions","body","setVelocity","anims","play","_Component2","_actions","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","_","sceneKey","rawAssets","assets","raw","array","averageLightsContribute","cursors","map","player","rooms","_this2","_scrapeAssets","obj","load","path","nPath","bPath","image","_this3","scrapeComplexObjKey","params","findFileNameFromPath","setName","lights","enable","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","wallsLayer","startFollow","setRoundPixels","world","Settings","TILE_SIZE","DEVICE","ROOM_FRAME_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_MOBILE","SCREEN_PROPS","calculatedWidth","ROOM_HEIGHT_IN_TILE","ROOM_FRAME_IN_TILES_DESKTOP","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","backgroundLayer","createDynamicLayer","addTilesetImage","tiles","background","walls","wallsMaskLayer","_this4","objects","element","borderMasksLayer","setScrollFactor","setOrigin","_updateMasksByLightDiffusion","children","list","lightSources","calculateAverageLightsContribute","setAlpha","Scene","Behaviours","Characters","InventoryObjects","WorldObjects","NPCharacter","Player","_Character2","isBlocked","on","pointer","pointerDown"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory();\n\telse\n\t\troot[\"TDLib\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","const Behaviours = {\n\n};\n\nmodule.exports = Behaviours;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLCharacter.\n * @extends TDLib.Sprites.TDLSprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new TDLCharacter.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = 'RIGHT';\n  }\n\n  create() {\n    super.create();\n    // this.setPipeline('Light2D');\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Idle: require('./Idle')\n};\n\nmodule.exports = Actions;\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker.remove();\n      }\n\n      abort() {\n        this.finishCallback();\n      }\n\n      resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  abort() {\n    if (this._queue.length > 0) this._queue[0].abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  start() {\n    if (this._queue.length > 0) this._queue[0].start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker.remove();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  pause() {\n    if (this._queue.length > 0) {\n      this._queue[0].pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0].resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length > 0) this._queue[0].update();\n  }\n}\n","const Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent')\n};\n\nmodule.exports = Components;\n","/**\n * The namespace of components.\n * @namespace TDLib.Components\n */\n\n/**\n * Class representing a generic TDLComponent. A TDLComponent extends the members and methods of a TDLSprite which uses it.\n * @memberof TDLib.Components\n */\nexport default class Component {\n  /**\n   * Creates a new TDLComponent.\n   * @param {TDLib.Sprites.TDLSprite} gameObject - The TDLSprite which owns the component.\n   */\n  constructor(gameObject) {\n\n    /**\n     * The name of the component.\n     * @type {string}\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The TDLSprite which owns the component.\n     * @type {TDLib.Sprites.TDLSprite}\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Behaviour from './behaviours';\n// import BehaviourComponent from '../components';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviour.INERT,\n    pixelPerfect = null,\n    observeText = Behaviour.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviour.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviour.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviour.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviour.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviour.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    // this.behaviour = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:');\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/**\n * @namespace TDLib\n */\n\nconst TDLib = {\n  boot: require('./boot'),\n  Actions: require('./actions'),\n  Components: require('./components'),\n  Rooms: require('./rooms'),\n  Sprites: require('./sprites'),\n  Utils: require('./utils')\n};\n\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export const boot = (config) => {\n  console.log(config);\n};\n","import Action from './Action';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(invoker, actor, config);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case 'LEFT': {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case 'RIGHT': {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Component from './Component';\nimport Actions from '../actions';\n\n/**\n * The actions namespace.\n * @namespace TDLib.Components.Actions\n * @since 1.0.0\n */\n\n/**\n * Class representing a component responsible of every TDLAction preformed.\n * @extends TDLib.Components.TDLComponent\n * @memberof TDLib.Components\n * @since 1.0.0\n */\nexport default class ActionComponent extends Component {\n  /**\n   * Create an ActionComponent.\n   * @param {TDLib.Sprites.TDLSprite} actor - The performer of the action.\n   */\n  constructor(actor) {\n    super(actor);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The default action to be played.\n     * @type {TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.actor);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0].start();\n  }\n\n  /**\n   * The queue is emptied and the new action is immediately performed.\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * The new action is added to the queue.\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * The currently performed action is paused and the new action is immediately performed. Then the paused action is resumed.\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Start a new action or add that to the queue.\n   * @param {TDLib.Components.Actions.TDLAction} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The mode to execute the action: ActionComponent.DEFAULT_MODE, ActionComponent.QUEUE_MODE or ActionComponent.PAUSE_MODE.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.actor, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0].abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0].start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0].pause();\n        this._queue.unshift(newAction);\n        this._queue[0].start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0].resume();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0].resume();\n      else this._queue[0].start();\n    }\n\n    this._queue[0].update();\n  }\n}\n","import { Utils, Settings } from './';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    );// .setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        this[element.name] = eval('new ' + element.type + '(this,' + (element.x + element.width / 2) + ', ' + (element.y - element.height / 2) + ');');\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE,\n      0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0,\n      this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions.update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Sprites = {\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  InventoryObjects: require('./inventory-objects'),\n  WorldObjects: require('./world-objects'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player'),\n  Character: require('./Character')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryObjects = {\n\n};\n\nmodule.exports = InventoryObjects;\n","const WorldObjects = {\n\n};\n\nmodule.exports = WorldObjects;\n","const Utils = {\n\n};\n\nmodule.exports = Utils;\n"],"sourceRoot":""}