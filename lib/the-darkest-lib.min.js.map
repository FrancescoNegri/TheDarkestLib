{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/const.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/actions/index.js","webpack://TDLib/./src/actions/Action.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/./src/boot.js","webpack://TDLib/./src/actions/Idle.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-objects/index.js","webpack://TDLib/./src/sprites/world-objects/index.js","webpack://TDLib/./src/utils/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LEFT","RIGHT","Actions","Action","require","Idle","invoker","actor","config","arguments","length","undefined","_classCallCheck","this","constructor","target","_queue","isPaused","actions","_this","Array","isArray","forEach","action","push","abort","start","finish","shift","remove","pause","resume","update","BaseAction","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","_createClass","Components","Component","ActionComponent","gameObject","Rooms","Room","_Sprite2","_interopRequireDefault","_behaviours","_components","_const","Character","room","x","y","texture","layer","_ref","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","concat","slice","default","INTERACTIVE","alphaTolerance","facing","_get","Sprite","hasBody","observeText","INERT","DEFAULT_OBSERVE_TEXT","examineOrInteractText","DEFAULT_EXAMINE_OR_INTERACT_TEXT","blockExamineText","noLightObserveText","DEFAULT_NO_LIGHT_OBSERVE_TEXT","noLightExamineOrInteractText","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","minLightLevelToObserve","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","Math","floor","random","type","add","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","console","warn","Phaser","Physics","Arcade","log","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","TDLib","boot","Sprites","Utils","Objects","Extend","global","g","Function","eval","e","_Action2","addActions","body","setVelocity","anims","play","_Component2","_actions","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","_","sceneKey","rawAssets","assets","raw","array","averageLightsContribute","cursors","map","player","rooms","_this2","_scrapeAssets","obj","load","path","nPath","bPath","image","_this3","scrapeComplexObjKey","params","findFileNameFromPath","setName","lights","enable","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","wallsLayer","startFollow","setRoundPixels","world","Settings","TILE_SIZE","DEVICE","ROOM_FRAME_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_MOBILE","SCREEN_PROPS","calculatedWidth","ROOM_HEIGHT_IN_TILE","ROOM_FRAME_IN_TILES_DESKTOP","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","backgroundLayer","createDynamicLayer","addTilesetImage","tiles","background","walls","wallsMaskLayer","_this4","objects","element","borderMasksLayer","setScrollFactor","setOrigin","_updateMasksByLightDiffusion","children","list","lightSources","calculateAverageLightsContribute","setAlpha","Scene","Behaviours","Characters","InventoryObjects","WorldObjects","NPCharacter","Player","_Character2","isBlocked","on","pointer","pointerDown"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory();\n\telse\n\t\troot[\"TDLib\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","const CONST = {\n  LEFT: '_left',\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","const Behaviours = {\n\n};\n\nmodule.exports = Behaviours;\n","const Actions = {\n  Action: require('./Action'),\n  Idle: require('./Idle')\n};\n\nmodule.exports = Actions;\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker.remove();\n      }\n\n      abort() {\n        this.finishCallback();\n      }\n\n      resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  abort() {\n    if (this._queue.length > 0) this._queue[0].abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  start() {\n    if (this._queue.length > 0) this._queue[0].start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker.remove();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  pause() {\n    if (this._queue.length > 0) {\n      this._queue[0].pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0].resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length > 0) this._queue[0].update();\n  }\n}\n","const Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent')\n};\n\nmodule.exports = Components;\n","/**\n * The namespace of components.\n * @namespace TDLib.Components\n */\n\n/**\n * Class representing a generic TDLComponent. A TDLComponent extends the members and methods of a TDLSprite which uses it.\n * @memberof TDLib.Components\n */\nexport default class Component {\n  /**\n   * Creates a new TDLComponent.\n   * @param {TDLib.Sprites.TDLSprite} gameObject - The TDLSprite which owns the component.\n   */\n  constructor(gameObject) {\n\n    /**\n     * The name of the component.\n     * @type {string}\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The TDLSprite which owns the component.\n     * @type {TDLib.Sprites.TDLSprite}\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLCharacter.\n * @extends TDLib.Sprites.TDLSprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new TDLCharacter.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n    // this.setPipeline('Light2D');\n  }\n}\n","import Behaviour from './behaviours';\n// import BehaviourComponent from '../components';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviour.INERT,\n    pixelPerfect = null,\n    observeText = Behaviour.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviour.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviour.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviour.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviour.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviour.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    // this.behaviour = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:'); // , this.behaviour.type);\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","import CONST from './const';\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  boot: require('./boot'),\n  Actions: require('./actions'),\n  Components: require('./components'),\n  Rooms: require('./rooms'),\n  Sprites: require('./sprites'),\n  Utils: require('./utils')\n};\n\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export const boot = (config) => {\n  console.log(config);\n};\n","import Action from './Action';\nimport CONST from '../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Component from './Component';\nimport Actions from '../actions';\n\n/**\n * The actions namespace.\n * @namespace TDLib.Components.Actions\n * @since 1.0.0\n */\n\n/**\n * Class representing a component responsible of every TDLAction preformed.\n * @extends TDLib.Components.TDLComponent\n * @memberof TDLib.Components\n * @since 1.0.0\n */\nexport default class ActionComponent extends Component {\n  /**\n   * Create an ActionComponent.\n   * @param {TDLib.Sprites.TDLSprite} actor - The performer of the action.\n   */\n  constructor(actor) {\n    super(actor);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The default action to be played.\n     * @type {TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.actor);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0].start();\n  }\n\n  /**\n   * The queue is emptied and the new action is immediately performed.\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * The new action is added to the queue.\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * The currently performed action is paused and the new action is immediately performed. Then the paused action is resumed.\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Start a new action or add that to the queue.\n   * @param {TDLib.Components.Actions.TDLAction} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The mode to execute the action: ActionComponent.DEFAULT_MODE, ActionComponent.QUEUE_MODE or ActionComponent.PAUSE_MODE.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.actor, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0].abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0].start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0].pause();\n        this._queue.unshift(newAction);\n        this._queue[0].start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0].resume();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0].resume();\n      else this._queue[0].start();\n    }\n\n    this._queue[0].update();\n  }\n}\n","import { Utils, Settings } from './';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    );// .setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        this[element.name] = eval('new ' + element.type + '(this,' + (element.x + element.width / 2) + ', ' + (element.y - element.height / 2) + ');');\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE,\n      0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0,\n      this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions.update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Sprites = {\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  InventoryObjects: require('./inventory-objects'),\n  WorldObjects: require('./world-objects'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryObjects = {\n\n};\n\nmodule.exports = InventoryObjects;\n","const WorldObjects = {\n\n};\n\nmodule.exports = WorldObjects;\n","const Utils = {\n\n};\n\nmodule.exports = Utils;\n"],"sourceRoot":""}